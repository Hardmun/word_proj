; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "Word split"
#define MyAppVersion "1.0"
#define MyAppPublisher "Nikulin V."
#define MyAppExeName "wordsplit.exe"

[Setup]
; NOTE: The value of AppId uniquely identifies this application. Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{9AD8A1F1-819A-45CC-B586-32E61C4F8B3B}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
DefaultDirName=C:\Program Files\Word split
DisableProgramGroupPage=yes
; Uncomment the following line to run in non administrative install mode (install for current user only.)
;PrivilegesRequired=lowest
PrivilegesRequiredOverridesAllowed=commandline
OutputBaseFilename=mysetup
SetupIconFile=C:\install\word_parser\word.ico
Compression=lzma
SolidCompression=yes
WizardStyle=modern

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Files]
Source: "C:\install\word_parser\Wordsplit.exe"; DestDir: "{app}"; Flags: ignoreversion
; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[Icons]
Name: "{autoprograms}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"

[INI]
FileName: "{app}\settings.ini"; Section: "Paths"; Key: "path"; String: "{code:GetWordDir}"

[Dirs]
Name: "{app}"; Flags: uninsalwaysuninstall

[run]
Filename: {sys}\sc.exe; Parameters: "create Wordsplit start=auto binPath= ""{app}\wordsplit.exe"" displayname=""Word split""" ; Flags: runhidden
Filename: {sys}\sc.exe; Parameters: "description Wordsplit ""Word split application""" ; Flags: runhidden
Filename: {sys}\sc.exe; Parameters: "start Wordsplit" ; Flags: runhidden

[UninstallRun]
Filename: {sys}\sc.exe; Parameters: "stop Wordsplit" ; Flags: runhidden
Filename: {sys}\sc.exe; Parameters: "delete Wordsplit" ; Flags: runhidden

[UninstallDelete]
Type: filesandordirs; Name: "{app}\unnecessary_files"

[Code]
var
  OtherInputDirPage: TInputDirWizardPage;

procedure InitializeWizard;
begin
  OtherInputDirPage :=
    CreateInputDirPage(wpSelectDir, 'Select the WORD directory to analyze', '', '', False, '');
  OtherInputDirPage.Add('');
end;

function GetWordDir(Param: String): String;
begin
  Result := OtherInputDirPage.Values[0];
end;

/////////////////////////////////////////////////////////////////////
function GetUninstallString(): String;
var
  sUnInstPath: String;
  sUnInstallString: String;
begin
  sUnInstPath := ExpandConstant('Software\Microsoft\Windows\CurrentVersion\Uninstall\{#emit SetupSetting("AppId")}_is1');
  sUnInstallString := '';
  if not RegQueryStringValue(HKLM, sUnInstPath, 'UninstallString', sUnInstallString) then
    RegQueryStringValue(HKCU, sUnInstPath, 'UninstallString', sUnInstallString);
  Result := sUnInstallString;
end;

/////////////////////////////////////////////////////////////////////
function IsUpgrade(): Boolean;
begin
  Result := (GetUninstallString() <> '');
end;

/////////////////////////////////////////////////////////////////////
function UnInstallOldVersion(): Integer;
var
  sUnInstallString: String;
  iResultCode: Integer;
begin
// Return Values:
// 1 - uninstall string is empty
// 2 - error executing the UnInstallString
// 3 - successfully executed the UnInstallString

  // default return value
  Result := 0;

  // get the uninstall string of the old app
  sUnInstallString := GetUninstallString();
  if sUnInstallString <> '' then begin
    sUnInstallString := RemoveQuotes(sUnInstallString);
    if Exec(sUnInstallString, '/SILENT /NORESTART /SUPPRESSMSGBOXES','', SW_HIDE, ewWaitUntilTerminated, iResultCode) then
      Result := 3
    else
      Result := 2;
  end else
    Result := 1;
end;

/////////////////////////////////////////////////////////////////////
procedure CurStepChanged(CurStep: TSetupStep);
begin
  if (CurStep=ssInstall) then
  begin
    if (IsUpgrade()) then
    begin
      UnInstallOldVersion();
    end;
  end;
end;